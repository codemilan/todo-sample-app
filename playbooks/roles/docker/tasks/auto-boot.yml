---
- name: Installing upstart
  apt:  name=upstart state=latest force=yes

- name:  Verifying auto-boot variables
  assert:
    that:
      - image    is defined
      - app_name is defined

- name:     Setting Docker ports
  set_fact: docker_ports=""
# [ port1, port2, port3 ] => "-p port1:port1 -p port2:port1 -p port3:port3"
- set_fact: docker_ports="{{ ports | transform( "-p {0}:{0}" ) | join( ' ' ) }}"
  when:     ports is defined

- name: Creating Docker env file
  lineinfile:
    # http://docs.ansible.com/faq.html#how-do-i-access-a-variable-name-programmatically
    line:   "{{ item }}={{ hostvars[ inventory_hostname ][ item ] | mandatory }}"
    create: yes
    dest:   "/opt/{{ app_name }}.env"
  with_items: env_vars
  when:       env_vars is defined

- set_fact: docker_env_file=""

- name:     Setting Docker env file (file created)
  set_fact: docker_env_file="--env-file '/opt/{{ app_name }}.env'"
  when:     env_vars is defined

- name:     Setting Docker env file (file already exists)
  set_fact: docker_env_file="--env-file '{{ env_file }}'"
  when:     env_file is defined

- name:     Building Docker command
  set_fact:
    docker_commands:
      - "docker kill '{{ app_name }}'"
      - "docker rm   '{{ app_name }}'"
      - "docker pull '{{ image }}'"
      - "docker run {{ docker_ports }} {{ docker_env_file }} --name '{{ app_name }}' '{{ image }}'"
- debug:    var=docker_commands

- name: Generating upstart template
  template:
    src:  upstart
    dest: "/etc/init/{{ app_name }}.conf"
- command:  cat "/etc/init/{{ app_name }}.conf"
  register: upstart_template
- debug: var=upstart_template.stdout_lines
